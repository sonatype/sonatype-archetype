 ------
 Create an Archetype from a Project
 ------
 Raphaël Piéroni
 ------
 10 February 2008
 ------

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html


What is done during the creation of an archetype?

* Property resolution

    First the Archetype Plugin asks the user to provide the common properties' 
    values (archetype.groupId, archetype.artifactId, archetype.version, groupId, 
    artifactId, version, package).

    Then it asks for additional properties.

* Archetype creation

    Using the project's directory as sources, the properties filteredExtensions 
    and languages, the module tree; the Archetype Plugin search for revelant 
    filesets indexed by module.

    Using the revelant filesets, the module tree, the resolved properties; the 
    Archetype Plugin creates the archetype's resources.

    Then it creates the archetype's descriptor using the the module tree, the 
    revelant filesets, the resolved properties.

    Finishing by creating the pom for the archetype as a project.

* Archetype installation

    Optionally after creating the archetype, the Archetype Plugin installs the 
    archetype in the local repository. And it updates the local catalog.

* Archetype deployment

    Optionally after installing the archetype, the Archetype Plugin deploys the
    archetype in the remote repository.

* Interactive mode

    The default behaviour is to operate in batch mode. The interactive mode is
    optionally used.

* Advanced batch mode

    The additional properties in batch mode can only be defined using a property 
    file. This file also can contain the other properties both the commons and 
    the filteredExtensions and languages.

* Fileset resolution

    In each module's directory and excluding submodules trees, the Archetype 
    Plugin sorts the files by languages, fileteredExtensions and sensible 
    default base pathes (src/main/<languages>, src/main/<siblings>, 
    src/test/<languages>, src/test/<siblings>, ...).

    This defines a tri-dimensional matrix. Each sorted group (matrix' cases) 
    becomes a resolved fileset.
